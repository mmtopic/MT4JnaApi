package com.mmtap.trader.janapi;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * ---<br>
 * <i>native declaration : MT4ManagerAPI.h:246</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ConGroupSec extends Structure {
	/** enable show and trade for this group of securites */
	public int show;
	/** enable show and trade for this group of securites */
	public int trade;
	/** dealing mode-EXECUTION_MANUAL,EXECUTION_AUTO,EXECUTION_ACTIVITY */
	public int execution;
	/** standart commission */
	public double comm_base;
	/** commission type-COMM_TYPE_MONEY,COMM_TYPE_PIPS,COMM_TYPE_PERCENT */
	public int comm_type;
	/** commission lots mode-COMMISSION_PER_LOT,COMMISSION_PER_DEAL */
	public int comm_lots;
	/** agent commission */
	public double comm_agent;
	/** agent commission mode-COMM_TYPE_MONEY, COMM_TYPE_PIPS */
	public int comm_agent_type;
	/** spread difference in compare with default security spread */
	public int spread_diff;
	/** allowed minimal and maximal lot values */
	public int lot_min;
	/** allowed minimal and maximal lot values */
	public int lot_max;
	/** allowed step value (10 lot-1000, 1 lot-100, 0.1 lot-10) */
	public int lot_step;
	/** maximum price deviation in Instant Execution mode */
	public int ie_deviation;
	/** use confirmation in Request mode */
	public int confirmation;
	/** clients trade rights-bit mask see TRADE_DENY_NONE,TRADE_DENY_CLOSEBY,TRADE_DENY_MUCLOSEBY */
	public int trade_rights;
	/** do not resend request to the dealer when client uses deviation */
	public int ie_quick_mode;
	/** auto close-out method { CLOSE_OUT_NONE, CLOSE_OUT_HIHI, CLOSE_OUT_LOLO, CLOSE_OUT_HILO, CLOSE_OUT_LOHI, CLOSE_OUT_LOHI, CLOSE_OUT_FIFO, CLOSE_OUT_LIFO, CLOSE_OUT_INTRDAY_FIFO } */
	public int autocloseout_mode;
	/** commission taxes */
	public double comm_tax;
	/** agent commission per lot/per deal { COMMISSION_PER_LOT,COMMISSION_PER_DEAL } */
	public int comm_agent_lots;
	/** "soft" margin check */
	public int freemargin_mode;
	/**
	 * reserved<br>
	 * C type : int[3]
	 */
	public int[] reserved = new int[3];
	public ConGroupSec() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("show", "trade", "execution", "comm_base", "comm_type", "comm_lots", "comm_agent", "comm_agent_type", "spread_diff", "lot_min", "lot_max", "lot_step", "ie_deviation", "confirmation", "trade_rights", "ie_quick_mode", "autocloseout_mode", "comm_tax", "comm_agent_lots", "freemargin_mode", "reserved");
	}
	public ConGroupSec(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends ConGroupSec implements Structure.ByReference {
		
	};
	public static class ByValue extends ConGroupSec implements Structure.ByValue {
		
	};
}
