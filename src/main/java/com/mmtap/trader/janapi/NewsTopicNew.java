package com.mmtap.trader.janapi;
import com.mmtap.trader.janapi.MT4ManagerAPILibrary.INT64;
import com.ochafik.lang.jnaerator.runtime.CharByReference;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * +------------------------------------------------------------------+<br>
 * <i>native declaration : MT4ManagerAPI.h:1391</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class NewsTopicNew extends Structure {
	/**
	 * <i>native declaration : MT4ManagerAPI.h:1394</i><br>
	 * enum values
	 */
	public static interface constants {
		/**
		 * max. body len<br>
		 * <i>native declaration : MT4ManagerAPI.h:1396</i>
		 */
		public static final int MAX_NEWS_BODY_LEN = 15 * 1024 * 1024;
	};
	/**
	 * <i>native declaration : MT4ManagerAPI.h:1399</i><br>
	 * enum values
	 */
	public static interface EnNewsFlags {
		/**
		 * priority flag<br>
		 * <i>native declaration : MT4ManagerAPI.h:1401</i>
		 */
		public static final int FLAG_PRIORITY = 1;
		/**
		 * calendar item flag<br>
		 * <i>native declaration : MT4ManagerAPI.h:1402</i>
		 */
		public static final int FLAG_CALENDAR = 2;
		/**
		 * MIME news content<br>
		 * <i>native declaration : MT4ManagerAPI.h:1403</i>
		 */
		public static final int FLAG_MIME = 4;
		/**
		 * allow body for demo accounts<br>
		 * <i>native declaration : MT4ManagerAPI.h:1404</i>
		 */
		public static final int FLAG_ALLOW_DEMO = 8;
	};
	/** news key */
	public NativeLong key;
	/** news language (WinAPI LANGID) */
	public int language;
	/**
	 * news subject<br>
	 * C type : wchar_t[256]
	 */
	public char[] subject = new char[256];
	/**
	 * news category<br>
	 * C type : wchar_t[256]
	 */
	public char[] category = new char[256];
	/** EnNewsFlags */
	public int flags;
	/**
	 * body<br>
	 * C type : wchar_t*
	 */
	public CharByReference body;
	/** body length */
	public int body_len;
	/**
	 * list of languages available for news<br>
	 * C type : UINT[32]
	 */
	public int[] languages_list = new int[32];
	/**
	 * news time<br>
	 * C type : INT64
	 */
	public INT64 datetime;
	/**
	 * reserved<br>
	 * C type : UINT[30]
	 */
	public int[] reserved = new int[30];
	public NewsTopicNew() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("key", "language", "subject", "category", "flags", "body", "body_len", "languages_list", "datetime", "reserved");
	}
	public NewsTopicNew(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends NewsTopicNew implements Structure.ByReference {
		
	};
	public static class ByValue extends NewsTopicNew implements Structure.ByValue {
		
	};
}
