package com.mmtap.trader.janapi;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * +------------------------------------------------------------------+<br>
 * <i>native declaration : MT4ManagerAPI.h:650</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ConPlugin extends Structure {
	/**
	 * plugin file name<br>
	 * C type : char[256]
	 */
	public byte[] file = new byte[256];
	/**
	 * plugin description<br>
	 * C type : PluginInfo
	 */
	public PluginInfo info;
	/** plugin enabled/disabled */
	public int enabled;
	/** is plugin configurable */
	public int configurable;
	/** plugin can be accessed from manager terminal */
	public int manager_access;
	/**
	 * reserved<br>
	 * C type : int[62]
	 */
	public int[] reserved = new int[62];
	public ConPlugin() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("file", "info", "enabled", "configurable", "manager_access", "reserved");
	}
	/**
	 * @param file plugin file name<br>
	 * C type : char[256]<br>
	 * @param info plugin description<br>
	 * C type : PluginInfo<br>
	 * @param enabled plugin enabled/disabled<br>
	 * @param configurable is plugin configurable<br>
	 * @param manager_access plugin can be accessed from manager terminal<br>
	 * @param reserved reserved<br>
	 * C type : int[62]
	 */
	public ConPlugin(byte file[], PluginInfo info, int enabled, int configurable, int manager_access, int reserved[]) {
		super();
		if ((file.length != this.file.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.file = file;
		this.info = info;
		this.enabled = enabled;
		this.configurable = configurable;
		this.manager_access = manager_access;
		if ((reserved.length != this.reserved.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.reserved = reserved;
	}
	public ConPlugin(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends ConPlugin implements Structure.ByReference {
		
	};
	public static class ByValue extends ConPlugin implements Structure.ByValue {
		
	};
}
