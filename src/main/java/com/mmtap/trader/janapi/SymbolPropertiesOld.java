package com.mmtap.trader.janapi;
import com.mmtap.trader.janapi.MT4ManagerAPILibrary.COLORREF;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * +------------------------------------------------------------------+<br>
 * <i>native declaration : MT4ManagerAPI.h:1318</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class SymbolPropertiesOld extends Structure {
	/**
	 * symbol<br>
	 * C type : char[12]
	 */
	public byte[] symbol = new byte[12];
	/**
	 * symbol color<br>
	 * C type : COLORREF
	 */
	public COLORREF color;
	/** symbol spread */
	public int spread;
	/** spread balance */
	public int spread_balance;
	/** stops level */
	public int stops_level;
	/** execution mode */
	public int exemode;
	public SymbolPropertiesOld() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("symbol", "color", "spread", "spread_balance", "stops_level", "exemode");
	}
	/**
	 * @param symbol symbol<br>
	 * C type : char[12]<br>
	 * @param color symbol color<br>
	 * C type : COLORREF<br>
	 * @param spread symbol spread<br>
	 * @param spread_balance spread balance<br>
	 * @param stops_level stops level<br>
	 * @param exemode execution mode
	 */
	public SymbolPropertiesOld(byte symbol[], COLORREF color, int spread, int spread_balance, int stops_level, int exemode) {
		super();
		if ((symbol.length != this.symbol.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.symbol = symbol;
		this.color = color;
		this.spread = spread;
		this.spread_balance = spread_balance;
		this.stops_level = stops_level;
		this.exemode = exemode;
	}
	public SymbolPropertiesOld(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends SymbolPropertiesOld implements Structure.ByReference {
		
	};
	public static class ByValue extends SymbolPropertiesOld implements Structure.ByValue {
		
	};
}
