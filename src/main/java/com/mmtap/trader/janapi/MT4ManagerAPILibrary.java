package com.mmtap.trader.janapi;
import com.sun.jna.Callback;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.PointerByReference;
import com.sun.jna.win32.StdCallLibrary.StdCallCallback;
/**
 * JNA Wrapper for library <b>MT4ManagerAPI</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface MT4ManagerAPILibrary extends Library {
	public static final String JNA_LIBRARY_NAME = "MT4ManagerAPI";
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(MT4ManagerAPILibrary.JNA_LIBRARY_NAME);
	public static final MT4ManagerAPILibrary INSTANCE = (MT4ManagerAPILibrary)Native.loadLibrary(MT4ManagerAPILibrary.JNA_LIBRARY_NAME, MT4ManagerAPILibrary.class);
	/** all configurations */
	public static final int CONFIG_ALL = 0;
	/** common configuration */
	public static final int CONFIG_COMMON = 1;
	/** IP access list configuration */
	public static final int CONFIG_ACCESS = 2;
	/** data servers */
	public static final int CONFIG_SERVERS = 3;
	/** working time configuration */
	public static final int CONFIG_TIME = 4;
	/** holidays configuration */
	public static final int CONFIG_HOLIDAYS = 5;
	/** symbols configuration */
	public static final int CONFIG_SYMBOLS = 6;
	/** securities configuration */
	public static final int CONFIG_SYMB_GROUPS = 7;
	/** groups configuration */
	public static final int CONFIG_GROUPS = 8;
	/** manager's rights configuration */
	public static final int CONFIG_MANAGERS = 9;
	/** data feeds configuration */
	public static final int CONFIG_DATAFEEDS = 10;
	/** backups configuration */
	public static final int CONFIG_BACKUP = 11;
	/** LiveUpdate configuration */
	public static final int CONFIG_LIVEUPDATE = 12;
	/** synchronization configuration */
	public static final int CONFIG_SYNC = 13;
	/** plugins configuration */
	public static final int CONFIG_PLUGINS = 14;
	/** gateway accounts */
	public static final int CONFIG_GATEWAY_ACCOUNTS = 15;
	/** gateway markups */
	public static final int CONFIG_GATEWAY_MARKUPS = 16;
	/** gateway rules */
	public static final int CONFIG_GATEWAY_RULES = 17;
	/** last (unused) */
	public static final int CONFIG_END = 255;
	public static final int DEMO_DISABLED = 0;
	public static final int DEMO_PROLONG = 1;
	public static final int DEMO_FIXED = 2;
	public static final int ROLLOVER_NORMAL = 0;
	public static final int ROLLOVER_REOPEN_BY_CLOSE_PRICE = 1;
	public static final int ROLLOVER_REOPEN_BY_BID = 2;
	public static final int LIVE_UPDATE_NO = 0;
	public static final int LIVE_UPDATE_RELEASE = 1;
	public static final int LIVE_UPDATE_NO_SERVER = 2;
	public static final int LIVE_UPDATE_BETA = 3;
	public static final int STATEMENT_END_DAY = 0;
	public static final int STATEMENT_START_DAY = 1;
	public static final int MONTHLY_STATEMENT_END_MONTH = 0;
	public static final int MONTHLY_STATEMENT_START_MONTH = 1;
	public static final int STOP_REASON_NONE = 0;
	public static final int STOP_REASON_RESTART = 1;
	public static final int STOP_REASON_SHUTDOWN = 2;
	public static final int STOP_REASON_LIVEUPDATE = 3;
	public static final int FW_BLOCK = 0;
	public static final int FW_PERMIT = 1;
	public static final int WATCH_STAND_ALONE = 0;
	public static final int WATCH_MASTER = 1;
	public static final int WATCH_SLAVE = 2;
	public static final int BACKUP_1HOUR = 0;
	public static final int BACKUP_4HOURS = 1;
	public static final int BACKUP_1DAY = 2;
	public static final int BU_STORE_1MONTH = 0;
	public static final int BU_STORE_3MONTHS = 1;
	public static final int BU_STORE_6MONTHS = 2;
	public static final int BU_STORE_1YEAR = 3;
	public static final int ARC_BACKUP_DISABLED = 0;
	public static final int ARC_BACKUP_5MIN = 1;
	public static final int ARC_BACKUP_15MIN = 2;
	public static final int ARC_BACKUP_30MIN = 3;
	public static final int ARC_BACKUP_1HOUR = 4;
	public static final int ARC_STORE_1DAY = 0;
	public static final int ARC_STORE_3DAYS = 1;
	public static final int ARC_STORE_1WEEK = 2;
	public static final int ARC_STORE_2WEEKS = 3;
	public static final int ARC_STORE_1MONTH = 4;
	public static final int ARC_STORE_3MONTH = 5;
	public static final int ARC_STORE_6MONTH = 6;
	public static final int EXPORT_1MIN = 0;
	public static final int EXPORT_5MIN = 1;
	public static final int EXPORT_15MIN = 2;
	public static final int EXPORT_30MIN = 3;
	public static final int EXPORT_1HOUR = 4;
	public static final int WS_DISCONNECTED = 0;
	public static final int WS_SYNCHRONIZING = 1;
	public static final int WS_SYNCHRONIZED = 2;
	public static final int FAILOVER_OFF = 0;
	public static final int FAILOVER_MOST = 1;
	public static final int FAILOVER_FULL = 2;
	public static final int FEED_QUOTES = 0;
	public static final int FEED_NEWS = 1;
	public static final int FEED_QUOTESNEWS = 2;
	public static final int EXECUTION_MANUAL = 0;
	public static final int EXECUTION_AUTO = 1;
	public static final int EXECUTION_ACTIVITY = 2;
	public static final int COMM_TYPE_MONEY = 0;
	public static final int COMM_TYPE_PIPS = 1;
	public static final int COMM_TYPE_PERCENT = 2;
	public static final int COMMISSION_PER_LOT = 0;
	public static final int COMMISSION_PER_DEAL = 1;
	public static final int TRADE_DENY_NONE = 0;
	public static final int TRADE_DENY_CLOSEBY = 1;
	public static final int TRADE_DENY_MUCLOSEBY = 2;
	public static final int CLOSE_OUT_NONE = 0;
	public static final int CLOSE_OUT_HIHI = 1;
	public static final int CLOSE_OUT_LOLO = 2;
	public static final int CLOSE_OUT_HILO = 3;
	public static final int CLOSE_OUT_LOHI = 4;
	public static final int CLOSE_OUT_FIFO = 5;
	public static final int CLOSE_OUT_LIFO = 6;
	public static final int CLOSE_OUT_INTRDAY_FIFO = 7;
	public static final int MARGIN_MODE_DONT_USE = 0;
	public static final int MARGIN_MODE_USE_ALL = 1;
	public static final int MARGIN_MODE_USE_PROFIT = 2;
	public static final int MARGIN_MODE_USE_LOSS = 3;
	public static final int MARGIN_TYPE_PERCENT = 0;
	public static final int MARGIN_TYPE_CURRENCY = 1;
	public static final int NEWS_NO = 0;
	public static final int NEWS_TOPICS = 1;
	public static final int NEWS_FULL = 2;
	public static final int ALLOW_FLAG_EMAIL = 1;
	public static final int ALLOW_FLAG_TRAILING = 2;
	public static final int ALLOW_FLAG_ADVISOR = 4;
	public static final int ALLOW_FLAG_EXPIRATION = 8;
	public static final int ALLOW_FLAG_SIGNALS_ALL = 16;
	public static final int ALLOW_FLAG_SIGNALS_OWN = 32;
	public static final int ALLOW_FLAG_RISK_WARNING = 64;
	public static final int ALLOW_FLAG_FORCED_OTP_USAGE = 128;
	public static final int OTP_MODE_DISABLED = 0;
	public static final int OTP_MODE_TOTP_SHA256 = 1;
	public static final int LIVE_UPDATE_CLIENT = 0;
	public static final int LIVE_UPDATE_MANAGER = 1;
	public static final int LIVE_UPDATE_ADMIN = 2;
	public static final int LIVE_UPDATE_DATACENTER = 3;
	public static final int LIVE_UPDATE_CLIENT_PPC2002 = 4;
	public static final int LIVE_UPDATE_CLIENT_PPC2003 = 5;
	public static final int LIVE_UPDATE_MULTI = 6;
	public static final int LIVE_UPDATE_WD = 7;
	public static final int LIVE_UPDATE_CLIENT_PHONE = 8;
	public static final int LIVE_UPDATE_LAST = 9;
	public static final int EXE_REQUEST = 0;
	public static final int EXE_INSTANT = 1;
	public static final int EXE_MARKET = 2;
	public static final int TRADE_NO = 0;
	public static final int TRADE_CLOSE = 1;
	public static final int TRADE_FULL = 2;
	public static final int SWAP_BY_POINTS = 0;
	public static final int SWAP_BY_DOLLARS = 1;
	public static final int SWAP_BY_INTEREST = 2;
	public static final int SWAP_BY_MARGIN_CURRENCY = 3;
	public static final int PROFIT_CALC_FOREX = 0;
	public static final int PROFIT_CALC_CFD = 1;
	public static final int PROFIT_CALC_FUTURES = 2;
	public static final int MARGIN_CALC_FOREX = 0;
	public static final int MARGIN_CALC_CFD = 1;
	public static final int MARGIN_CALC_FUTURES = 2;
	public static final int MARGIN_CALC_CFDINDEX = 3;
	public static final int MARGIN_CALC_CFDLEVERAGE = 4;
	public static final int ORDERS_DAILY = 0;
	public static final int ORDERS_GTC = 1;
	public static final int ORDERS_DAILY_NO_STOPS = 2;
	public static final int HB_ADD = 0;
	public static final int HB_UPDATE = 1;
	public static final int HB_INSERT = 2;
	public static final int HB_DELETE = 3;
	public static final int HB_LAST = 4;
	/**
	 * --- gateway account flags<br>
	 * <i>native declaration : MT4ManagerAPI.h:686</i><br>
	 * enum values
	 */
	public static interface EnGatewayAccountFlags {
		/** <i>native declaration : MT4ManagerAPI.h:686</i> */
		public static final int GATEWAY_FLAG_NONE = 0;
		/** <i>native declaration : MT4ManagerAPI.h:686</i> */
		public static final int GATEWAY_FLAG_QUOTES = 1;
	};
	/** all OK */
	public static final int RET_OK = 0;
	/** all OK-no operation */
	public static final int RET_OK_NONE = 1;
	/** general error */
	public static final int RET_ERROR = 2;
	/** invalid data */
	public static final int RET_INVALID_DATA = 3;
	/** server technical problem */
	public static final int RET_TECH_PROBLEM = 4;
	/** old client terminal */
	public static final int RET_OLD_VERSION = 5;
	/** no connection */
	public static final int RET_NO_CONNECT = 6;
	/** no enough rights */
	public static final int RET_NOT_ENOUGH_RIGHTS = 7;
	/** too frequently access to server */
	public static final int RET_TOO_FREQUENT = 8;
	/** mulfunctional operation */
	public static final int RET_MALFUNCTION = 9;
	/** need to send public key */
	public static final int RET_GENERATE_KEY = 10;
	/** security session start */
	public static final int RET_SECURITY_SESSION = 11;
	/** account blocked */
	public static final int RET_ACCOUNT_DISABLED = 64;
	/** bad account info */
	public static final int RET_BAD_ACCOUNT_INFO = 65;
	/** no key */
	public static final int RET_PUBLIC_KEY_MISSING = 66;
	/** trade transatcion timeou expired */
	public static final int RET_TRADE_TIMEOUT = 128;
	/** order has wrong prices */
	public static final int RET_TRADE_BAD_PRICES = 129;
	/** wrong stops level */
	public static final int RET_TRADE_BAD_STOPS = 130;
	/** wrong lot size */
	public static final int RET_TRADE_BAD_VOLUME = 131;
	/** market closed */
	public static final int RET_TRADE_MARKET_CLOSED = 132;
	/** trade disabled */
	public static final int RET_TRADE_DISABLE = 133;
	/** no enough money for order execution */
	public static final int RET_TRADE_NO_MONEY = 134;
	/** price changed */
	public static final int RET_TRADE_PRICE_CHANGED = 135;
	/** no quotes */
	public static final int RET_TRADE_OFFQUOTES = 136;
	/** broker is busy */
	public static final int RET_TRADE_BROKER_BUSY = 137;
	/** requote */
	public static final int RET_TRADE_REQUOTE = 138;
	/** order is proceed by dealer and cannot be changed */
	public static final int RET_TRADE_ORDER_LOCKED = 139;
	/** allowed only BUY orders */
	public static final int RET_TRADE_LONG_ONLY = 140;
	/** too many requests from one client */
	public static final int RET_TRADE_TOO_MANY_REQ = 141;
	/** trade request accepted by server and placed in request queue */
	public static final int RET_TRADE_ACCEPTED = 142;
	/** trade request accepted by dealerd */
	public static final int RET_TRADE_PROCESS = 143;
	/** trade request canceled by client */
	public static final int RET_TRADE_USER_CANCEL = 144;
	/** trade modification denied */
	public static final int RET_TRADE_MODIFY_DENIED = 145;
	/** trade context is busy (used in client terminal) */
	public static final int RET_TRADE_CONTEXT_BUSY = 146;
	/** using expiration date denied */
	public static final int RET_TRADE_EXPIRATION_DENIED = 147;
	/** too many orders */
	public static final int RET_TRADE_TOO_MANY_ORDERS = 148;
	/** hedge is prohibited */
	public static final int RET_TRADE_HEDGE_PROHIBITED = 149;
	/** prohibited by fifo rule */
	public static final int RET_TRADE_PROHIBITED_BY_FIFO = 150;
	/** do not send ticks */
	public static final int CLIENT_FLAGS_HIDETICKS = 1;
	/** do not send news */
	public static final int CLIENT_FLAGS_HIDENEWS = 2;
	/** do not send mails */
	public static final int CLIENT_FLAGS_HIDEMAIL = 4;
	/** send news body with news header in pumping mode */
	public static final int CLIENT_FLAGS_SENDFULLNEWS = 8;
	/** reserved */
	public static final int CLIENT_FLAGS_RESERVED = 16;
	/** do not send online users table */
	public static final int CLIENT_FLAGS_HIDEONLINE = 32;
	/** do not send users table */
	public static final int CLIENT_FLAGS_HIDEUSERS = 64;
	/**
	 * --- feeder modes<br>
	 * <i>native declaration : MT4ManagerAPI.h:805</i><br>
	 * enum values
	 */
	public static interface FeederModes {
		/**
		 * only quotes feeder<br>
		 * <i>native declaration : MT4ManagerAPI.h:807</i>
		 */
		public static final int modeOnlyQuotes = 0;
		/**
		 * only news feeder<br>
		 * <i>native declaration : MT4ManagerAPI.h:808</i>
		 */
		public static final int modeOnlyNews = 1;
		/**
		 * quotes and news feeder<br>
		 * <i>native declaration : MT4ManagerAPI.h:809</i>
		 */
		public static final int modeQuotesAndNews = 2;
		/**
		 * quotes or news feeder<br>
		 * <i>native declaration : MT4ManagerAPI.h:810</i>
		 */
		public static final int modeQuotesOrNews = 3;
	};
	public static final int PERIOD_M1 = 1;
	public static final int PERIOD_M5 = 5;
	public static final int PERIOD_M15 = 15;
	public static final int PERIOD_M30 = 30;
	public static final int PERIOD_H1 = 60;
	public static final int PERIOD_H4 = 240;
	public static final int PERIOD_D1 = 1440;
	public static final int PERIOD_W1 = 10080;
	public static final int PERIOD_MN1 = 43200;
	public static final int CHART_RANGE_IN = 0;
	public static final int CHART_RANGE_OUT = 1;
	public static final int CHART_RANGE_LAST = 2;
	public static final int TICK_FLAG_RAW = 1;
	public static final int TICK_FLAG_NORMAL = 2;
	public static final int TICK_FLAG_ALL = (int)MT4ManagerAPILibrary.TICK_FLAG_RAW + (int)MT4ManagerAPILibrary.TICK_FLAG_NORMAL;
	/** all backup */
	public static final int BACKUPS_ALL = 0;
	/** periodical backups */
	public static final int BACKUPS_PERIODICAL = 1;
	/** backups on startup */
	public static final int BACKUPS_STARTUP = 2;
	/** backups on delete */
	public static final int BACKUPS_DELETE = 3;
	public static final int TRANS_ADD = 0;
	public static final int TRANS_DELETE = 1;
	public static final int TRANS_UPDATE = 2;
	public static final int TRANS_CHANGE_GRP = 3;
	public static final int GROUP_DELETE = 0;
	public static final int GROUP_ENABLE = 1;
	public static final int GROUP_DISABLE = 2;
	public static final int GROUP_LEVERAGE = 3;
	public static final int GROUP_SETGROUP = 4;
	public static final int OP_BUY = 0;
	public static final int OP_SELL = 1;
	public static final int OP_BUY_LIMIT = 2;
	public static final int OP_SELL_LIMIT = 3;
	public static final int OP_BUY_STOP = 4;
	public static final int OP_SELL_STOP = 5;
	public static final int OP_BALANCE = 6;
	public static final int OP_CREDIT = 7;
	public static final int TS_OPEN_NORMAL = 0;
	public static final int TS_OPEN_REMAND = 1;
	public static final int TS_OPEN_RESTORED = 2;
	public static final int TS_CLOSED_NORMAL = 3;
	public static final int TS_CLOSED_PART = 4;
	public static final int TS_CLOSED_BY = 5;
	public static final int TS_DELETED = 6;
	/** client terminal */
	public static final int TR_REASON_CLIENT = 0;
	/** expert */
	public static final int TR_REASON_EXPERT = 1;
	/** dealer */
	public static final int TR_REASON_DEALER = 2;
	/** signal */
	public static final int TR_REASON_SIGNAL = 3;
	/** gateway */
	public static final int TR_REASON_GATEWAY = 4;
	/** mobile terminal */
	public static final int TR_REASON_MOBILE = 5;
	/** Web terminal */
	public static final int TR_REASON_WEB = 6;
	/** API */
	public static final int TR_REASON_API = 7;
	public static final int ACTIVATION_NONE = 0;
	public static final int ACTIVATION_SL = 1;
	public static final int ACTIVATION_TP = 2;
	public static final int ACTIVATION_PENDING = 3;
	public static final int ACTIVATION_STOPOUT = 4;
	public static final int ACTIVATION_SL_ROLLBACK = -(int)MT4ManagerAPILibrary.ACTIVATION_SL;
	public static final int ACTIVATION_TP_ROLLBACK = -(int)MT4ManagerAPILibrary.ACTIVATION_TP;
	public static final int ACTIVATION_PENDING_ROLLBACK = -(int)MT4ManagerAPILibrary.ACTIVATION_PENDING;
	public static final int ACTIVATION_STOPOUT_ROLLBACK = -(int)MT4ManagerAPILibrary.ACTIVATION_STOPOUT;
	/** prices requets */
	public static final int TT_PRICES_GET = 0;
	/** requote */
	public static final int TT_PRICES_REQUOTE = 1;
	/** open order (Instant Execution) */
	public static final int TT_ORDER_IE_OPEN = 64;
	/** open order (Request Execution) */
	public static final int TT_ORDER_REQ_OPEN = 65;
	/** open order (Market Execution) */
	public static final int TT_ORDER_MK_OPEN = 66;
	/** open pending order */
	public static final int TT_ORDER_PENDING_OPEN = 67;
	/** close order (Instant Execution) */
	public static final int TT_ORDER_IE_CLOSE = 68;
	/** close order (Request Execution) */
	public static final int TT_ORDER_REQ_CLOSE = 69;
	/** close order (Market Execution) */
	public static final int TT_ORDER_MK_CLOSE = 70;
	/** modify pending order */
	public static final int TT_ORDER_MODIFY = 71;
	/** delete pending order */
	public static final int TT_ORDER_DELETE = 72;
	/** close order by order */
	public static final int TT_ORDER_CLOSE_BY = 73;
	/** close all orders by symbol */
	public static final int TT_ORDER_CLOSE_ALL = 74;
	/** open order */
	public static final int TT_BR_ORDER_OPEN = 75;
	/** close order */
	public static final int TT_BR_ORDER_CLOSE = 76;
	/** delete order (ANY OPEN ORDER!!!) */
	public static final int TT_BR_ORDER_DELETE = 77;
	/** close order by order */
	public static final int TT_BR_ORDER_CLOSE_BY = 78;
	/** close all orders by symbol */
	public static final int TT_BR_ORDER_CLOSE_ALL = 79;
	/** modify open price, stoploss, takeprofit etc. of order */
	public static final int TT_BR_ORDER_MODIFY = 80;
	/** activate pending order */
	public static final int TT_BR_ORDER_ACTIVATE = 81;
	/** modify comment of order */
	public static final int TT_BR_ORDER_COMMENT = 82;
	/** balance/credit */
	public static final int TT_BR_BALANCE = 83;
	/**
	 * --- trade request flags<br>
	 * <i>native declaration : MT4ManagerAPI.h:1143</i><br>
	 * enum values
	 */
	public static interface EnReqFlags {
		/**
		 * flags none<br>
		 * <i>native declaration : MT4ManagerAPI.h:1145</i>
		 */
		public static final int TT_FLAG_NONE = 0x00000000;
		/**
		 * placed by signal<br>
		 * <i>native declaration : MT4ManagerAPI.h:1146</i>
		 */
		public static final int TT_FLAG_SIGNAL = 0x00000001;
		/**
		 * placed by expert<br>
		 * <i>native declaration : MT4ManagerAPI.h:1147</i>
		 */
		public static final int TT_FLAG_EXPERT = 0x00000002;
		/**
		 * placed by gateway<br>
		 * <i>native declaration : MT4ManagerAPI.h:1148</i>
		 */
		public static final int TT_FLAG_GATEWAY = 0x00000004;
		/**
		 * placed by mobile terminal<br>
		 * <i>native declaration : MT4ManagerAPI.h:1149</i>
		 */
		public static final int TT_FLAG_MOBILE = 0x00000008;
		/**
		 * placed by web terminal<br>
		 * <i>native declaration : MT4ManagerAPI.h:1150</i>
		 */
		public static final int TT_FLAG_WEB = 0x00000010;
		/**
		 * placed by api<br>
		 * <i>native declaration : MT4ManagerAPI.h:1151</i>
		 */
		public static final int TT_FLAG_API = 0x00000020;
	};
	public static final int MARGINLEVEL_OK = 0;
	public static final int MARGINLEVEL_MARGINCALL = 1;
	public static final int MARGINLEVEL_STOPOUT = 2;
	public static final int DC_EMPTY = 0;
	public static final int DC_REQUEST = 1;
	public static final int DC_LOCKED = 2;
	public static final int DC_ANSWERED = 3;
	public static final int DC_RESETED = 4;
	public static final int DC_CANCELED = 5;
	/**
	 * --- request confirmation modes<br>
	 * <i>native declaration : MT4ManagerAPI.h:1207</i><br>
	 * enum values
	 */
	public static interface EnConfirmModes {
		/**
		 * throw in prices<br>
		 * <i>native declaration : MT4ManagerAPI.h:1209</i>
		 */
		public static final int CONFIRM_MODE_ADD_PRICES = 0x00000001;
		/**
		 * multiple execution<br>
		 * <i>native declaration : MT4ManagerAPI.h:1210</i>
		 */
		public static final int CONFIRM_MODE_PACKET = 0x00000002;
	};
	public static final int SDIR_UP = 0;
	public static final int SDIR_DOWN = 1;
	public static final int SDIR_NONE = 2;
	/**
	 * --- log record codes<br>
	 * <i>native declaration : MT4ManagerAPI.h:1429</i><br>
	 * enum values
	 */
	public static interface EnErrLogTypes {
		/**
		 * OK<br>
		 * <i>native declaration : MT4ManagerAPI.h:1430</i>
		 */
		public static final int CmdOK = 0;
		/**
		 * trades only<br>
		 * <i>native declaration : MT4ManagerAPI.h:1431</i>
		 */
		public static final int CmdTrade = 1;
		/**
		 * logins only<br>
		 * <i>native declaration : MT4ManagerAPI.h:1432</i>
		 */
		public static final int CmdLogin = 2;
		/**
		 * warnings<br>
		 * <i>native declaration : MT4ManagerAPI.h:1433</i>
		 */
		public static final int CmdWarn = 3;
		/**
		 * errors<br>
		 * <i>native declaration : MT4ManagerAPI.h:1434</i>
		 */
		public static final int CmdErr = 4;
		/**
		 * attention, important errors<br>
		 * <i>native declaration : MT4ManagerAPI.h:1435</i>
		 */
		public static final int CmdAtt = 5;
	};
	/**
	 * --- request logs type<br>
	 * <i>native declaration : MT4ManagerAPI.h:1438</i><br>
	 * enum values
	 */
	public static interface EnLogType {
		/**
		 * all except logins<br>
		 * <i>native declaration : MT4ManagerAPI.h:1439</i>
		 */
		public static final int LOG_TYPE_STANDARD = 0;
		/**
		 * logins only<br>
		 * <i>native declaration : MT4ManagerAPI.h:1440</i>
		 */
		public static final int LOG_TYPE_LOGINS = 1;
		/**
		 * trades only<br>
		 * <i>native declaration : MT4ManagerAPI.h:1441</i>
		 */
		public static final int LOG_TYPE_TRADES = 2;
		/**
		 * errors<br>
		 * <i>native declaration : MT4ManagerAPI.h:1442</i>
		 */
		public static final int LOG_TYPE_ERRORS = 3;
		/**
		 * full log<br>
		 * <i>native declaration : MT4ManagerAPI.h:1443</i>
		 */
		public static final int LOG_TYPE_FULL = 4;
		/**
		 * live update<br>
		 * <i>native declaration : MT4ManagerAPI.h:1445</i>
		 */
		public static final int LOG_TYPE_UPDATER = 16;
		/**
		 * send mail<br>
		 * <i>native declaration : MT4ManagerAPI.h:1446</i>
		 */
		public static final int LOG_TYPE_SENDMAIL = 17;
		/**
		 * failover<br>
		 * <i>native declaration : MT4ManagerAPI.h:1447</i>
		 */
		public static final int LOG_TYPE_FAILOVER = 18;
	};
	/**
	 * --- request logs type<br>
	 * <i>native declaration : MT4ManagerAPI.h:1450</i><br>
	 * enum values
	 */
	public static interface EnLogMode {
		/**
		 * manager api logs enabled<br>
		 * <i>native declaration : MT4ManagerAPI.h:1451</i>
		 */
		public static final int LOG_MODE_ENABLED = 0;
		/**
		 * manager api logs disabled<br>
		 * <i>native declaration : MT4ManagerAPI.h:1452</i>
		 */
		public static final int LOG_MODE_DISABLED = 1;
	};
	/** pumping started */
	public static final int PUMP_START_PUMPING = 0;
	/** update symbols */
	public static final int PUMP_UPDATE_SYMBOLS = 1;
	/** update groups */
	public static final int PUMP_UPDATE_GROUPS = 2;
	/** update users */
	public static final int PUMP_UPDATE_USERS = 3;
	/** update online users */
	public static final int PUMP_UPDATE_ONLINE = 4;
	/** update bid/ask */
	public static final int PUMP_UPDATE_BIDASK = 5;
	/** update news */
	public static final int PUMP_UPDATE_NEWS = 6;
	/** update news body */
	public static final int PUMP_UPDATE_NEWS_BODY = 7;
	/** update news */
	public static final int PUMP_UPDATE_MAIL = 8;
	/** update trades */
	public static final int PUMP_UPDATE_TRADES = 9;
	/** update trade requests */
	public static final int PUMP_UPDATE_REQUESTS = 10;
	/** update server plugins */
	public static final int PUMP_UPDATE_PLUGINS = 11;
	/** new order for activation (sl/sp/stopout) */
	public static final int PUMP_UPDATE_ACTIVATION = 12;
	/** new margin calls */
	public static final int PUMP_UPDATE_MARGINCALL = 13;
	/** pumping stopped */
	public static final int PUMP_STOP_PUMPING = 14;
	/** ping */
	public static final int PUMP_PING = 15;
	/** update news in new format (NewsTopicNew structure) */
	public static final int PUMP_UPDATE_NEWS_NEW = 16;
	/** dealing dispatcher started */
	public static final int DEAL_START_DEALING = 0;
	/** new request */
	public static final int DEAL_REQUEST_NEW = 1;
	/** dealing dispatcher stopped */
	public static final int DEAL_STOP_DEALING = 2;
	/** <i>native declaration : MT4ManagerAPI.h</i> */
	public static final int ManAPIProgramVersion = (int)400;
	/** <i>native declaration : MT4ManagerAPI.h</i> */
	public static final int ManAPIProgramBuild = (int)1280;
	/** <i>native declaration : MT4ManagerAPI.h</i> */
	public static final int MAX_SEC_GROUPS = (int)(32);
	/** <i>native declaration : MT4ManagerAPI.h</i> */
	public static final int MAX_SEC_GROPS_MARGIN = (int)(128);
	/** <i>native declaration : MT4ManagerAPI.h</i> */
	public static final int LIVE_FILES_MAX = (int)(128);
	/** <i>native declaration : MT4ManagerAPI.h</i> */
	public static final int MAX_SYMBOLS = (int)1024;
	/** <i>native declaration : MT4ManagerAPI.h</i> */
	public static final int MAX_SEC_GROUP = (int)(32);
	/** <i>native declaration : MT4ManagerAPI.h</i> */
	public static final int PUBLIC_KEY_SIZE = (int)272;
	/** <i>native declaration : MT4ManagerAPI.h</i> */
	public static final int USER_COLOR_NONE = (int)(0xFF000000);
	/** <i>native declaration : MT4ManagerAPI.h</i> */
	public static final double TIME_RATE = (double)1.6777216;
	/** <i>native declaration : MT4ManagerAPI.h</i> */
	public interface MTAPI_NOTIFY_FUNC extends StdCallCallback {
		void apply(int code);
	};
	/** <i>native declaration : MT4ManagerAPI.h</i> */
	public interface MTAPI_NOTIFY_FUNC_EX extends StdCallCallback {
		void apply(int code, int type, Pointer data, Pointer param);
	};
	/** <i>native declaration : MT4ManagerAPI.h</i> */
	public interface MtManVersion_t extends Callback {
		int apply();
	};
	/** <i>native declaration : MT4ManagerAPI.h</i> */
	public interface MtManCreate_t extends Callback {
		int apply(int version, PointerByReference man);
	};
	public static class INT64 extends PointerType {
		public INT64(Pointer address) {
			super(address);
		}
		public INT64() {
			super();
		}
	};
	public static class UCHAR extends PointerType {
		public UCHAR(Pointer address) {
			super(address);
		}
		public UCHAR() {
			super();
		}
	};
	public static class COLORREF extends PointerType {
		public COLORREF(Pointer address) {
			super(address);
		}
		public COLORREF() {
			super();
		}
	};
}
