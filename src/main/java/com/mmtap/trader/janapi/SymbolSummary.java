package com.mmtap.trader.janapi;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * +------------------------------------------------------------------+<br>
 * <i>native declaration : MT4ManagerAPI.h:1284</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class SymbolSummary extends Structure {
	/**
	 * symbol<br>
	 * C type : char[12]
	 */
	public byte[] symbol = new byte[12];
	/** symbol counter */
	public int count;
	/** floating point digits */
	public int digits;
	/** symbol type (symbol group index) */
	public int type;
	/** number of client orders */
	public int orders;
	/** buy volume */
	public long buylots;
	/** sell volume */
	public long selllots;
	/** average buy price */
	public double buyprice;
	/** average sell price */
	public double sellprice;
	/** clients profit */
	public double profit;
	/** number of coverage orders */
	public int covorders;
	/** buy volume */
	public long covbuylots;
	/** sell volume */
	public long covselllots;
	/** average buy price */
	public double covbuyprice;
	/** average sell price */
	public double covsellprice;
	/** coverage profit */
	public double covprofit;
	public SymbolSummary() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("symbol", "count", "digits", "type", "orders", "buylots", "selllots", "buyprice", "sellprice", "profit", "covorders", "covbuylots", "covselllots", "covbuyprice", "covsellprice", "covprofit");
	}
	public SymbolSummary(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends SymbolSummary implements Structure.ByReference {
		
	};
	public static class ByValue extends SymbolSummary implements Structure.ByValue {
		
	};
}
