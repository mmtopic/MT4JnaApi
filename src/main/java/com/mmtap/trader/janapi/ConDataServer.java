package com.mmtap.trader.janapi;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * +------------------------------------------------------------------+<br>
 * <i>native declaration : MT4ManagerAPI.h:145</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ConDataServer extends Structure {
	/**
	 * server address (server:ip)<br>
	 * C type : char[64]
	 */
	public byte[] server = new byte[64];
	/** server IP */
	public NativeLong ip;
	/**
	 * server description<br>
	 * C type : char[64]
	 */
	public byte[] description = new byte[64];
	/** can server be proxy? */
	public int isproxy;
	/** priority: 0-7 base, 255-idle */
	public int priority;
	/** server loading (UINT_MAX-server does not inform its loading) */
	public int loading;
	/** internal IP address */
	public NativeLong ip_internal;
	/**
	 * reserved<br>
	 * C type : int[2]
	 */
	public int[] reserved = new int[2];
	/**
	 * internal (not used)<br>
	 * C type : ConDataServer*
	 */
	public ConDataServer.ByReference next;
	public ConDataServer() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("server", "ip", "description", "isproxy", "priority", "loading", "ip_internal", "reserved", "next");
	}
	/**
	 * @param server server address (server:ip)<br>
	 * C type : char[64]<br>
	 * @param ip server IP<br>
	 * @param description server description<br>
	 * C type : char[64]<br>
	 * @param isproxy can server be proxy?<br>
	 * @param priority priority: 0-7 base, 255-idle<br>
	 * @param loading server loading (UINT_MAX-server does not inform its loading)<br>
	 * @param ip_internal internal IP address<br>
	 * @param reserved reserved<br>
	 * C type : int[2]<br>
	 * @param next internal (not used)<br>
	 * C type : ConDataServer*
	 */
	public ConDataServer(byte server[], NativeLong ip, byte description[], int isproxy, int priority, int loading, NativeLong ip_internal, int reserved[], ConDataServer.ByReference next) {
		super();
		if ((server.length != this.server.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.server = server;
		this.ip = ip;
		if ((description.length != this.description.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.description = description;
		this.isproxy = isproxy;
		this.priority = priority;
		this.loading = loading;
		this.ip_internal = ip_internal;
		if ((reserved.length != this.reserved.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.reserved = reserved;
		this.next = next;
	}
	public ConDataServer(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends ConDataServer implements Structure.ByReference {
		
	};
	public static class ByValue extends ConDataServer implements Structure.ByValue {
		
	};
}
