package com.mmtap.trader.janapi;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * +------------------------------------------------------------------+<br>
 * <i>native declaration : MT4ManagerAPI.h:449</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ConManager extends Structure {
	/** login */
	public int login;
	/** right to add & change client records */
	public int manager;
	/** right to balance & credit management */
	public int money;
	/** right to see online users */
	public int online;
	/** right to use analyzer */
	public int riskman;
	/** right to deal */
	public int broker;
	/** right to server administration */
	public int admin;
	/** right to see logs */
	public int logs;
	/** right to see reports */
	public int reports;
	/** right to add/modify/delete trades */
	public int trades;
	/** right to change spread, spread balance, stop levels, execution mode and send quotes */
	public int market_watch;
	/** right to send internal mail */
	public int email;
	/** right to see clients private data-name,country,address,phone,email etc. */
	public int user_details;
	/** right to see trades */
	public int see_trades;
	/** right to send news */
	public int news;
	/** right to configure plugins */
	public int plugins;
	/** right to receive server reports */
	public int server_reports;
	/** right to access to technical support page */
	public int techsupport;
	/** right to access server applications market */
	public int market;
	/** right to push notifications */
	public int notifications;
	/** C type : int[9] */
	public int[] unused = new int[9];
	/** enable IP control */
	public int ipfilter;
	/** range of allowed IPs */
	public NativeLong ip_from;
	/** range of allowed IPs */
	public NativeLong ip_to;
	/**
	 * name of mailbox for internal mail<br>
	 * C type : char[64]
	 */
	public byte[] mailbox = new byte[64];
	/**
	 * comma separated list of managed groups (allowed '*' wildcard)<br>
	 * C type : char[1024]
	 */
	public byte[] groups = new byte[1024];
	/**
	 * manager rights for security groups<br>
	 * C type : ConManagerSec[(32)]
	 */
	public ConManagerSec[] secgroups = new ConManagerSec[32];
	/** internal data */
	public int exp_time;
	/**
	 * manager name (read only)<br>
	 * C type : char[32]
	 */
	public byte[] name = new byte[32];
	/** maximum available data (in days) */
	public int info_depth;
	/** C type : int[22] */
	public int[] reserved = new int[22];
	public ConManager() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("login", "manager", "money", "online", "riskman", "broker", "admin", "logs", "reports", "trades", "market_watch", "email", "user_details", "see_trades", "news", "plugins", "server_reports", "techsupport", "market", "notifications", "unused", "ipfilter", "ip_from", "ip_to", "mailbox", "groups", "secgroups", "exp_time", "name", "info_depth", "reserved");
	}
	public ConManager(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends ConManager implements Structure.ByReference {
		
	};
	public static class ByValue extends ConManager implements Structure.ByValue {
		
	};
}
