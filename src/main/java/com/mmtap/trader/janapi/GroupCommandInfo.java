package com.mmtap.trader.janapi;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * +------------------------------------------------------------------+<br>
 * <i>native declaration : MT4ManagerAPI.h:984</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class GroupCommandInfo extends Structure {
	/** length of users list */
	public int len;
	/** group coommand */
	public byte command;
	/**
	 * new group<br>
	 * C type : char[16]
	 */
	public byte[] newgroup = new byte[16];
	/** new leverage */
	public int leverage;
	/**
	 * reserved<br>
	 * C type : int[8]
	 */
	public int[] reserved = new int[8];
	public GroupCommandInfo() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("len", "command", "newgroup", "leverage", "reserved");
	}
	/**
	 * @param len length of users list<br>
	 * @param command group coommand<br>
	 * @param newgroup new group<br>
	 * C type : char[16]<br>
	 * @param leverage new leverage<br>
	 * @param reserved reserved<br>
	 * C type : int[8]
	 */
	public GroupCommandInfo(int len, byte command, byte newgroup[], int leverage, int reserved[]) {
		super();
		this.len = len;
		this.command = command;
		if ((newgroup.length != this.newgroup.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.newgroup = newgroup;
		this.leverage = leverage;
		if ((reserved.length != this.reserved.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.reserved = reserved;
	}
	public GroupCommandInfo(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends GroupCommandInfo implements Structure.ByReference {
		
	};
	public static class ByValue extends GroupCommandInfo implements Structure.ByValue {
		
	};
}
