package com.mmtap.trader.janapi;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * +------------------------------------------------------------------+<br>
 * <i>native declaration : MT4ManagerAPI.h:861</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public abstract class TickRecord extends Structure {
	/** Conversion Error : time_t (Primitive without known type for this runtime: NativeTime) */
	/** bid, ask */
	public double bid;
	/** bid, ask */
	public double ask;
	/** index if datafeed */
	public int datafeed;
	/** TICK_FLAG_* flags */
	public byte flags;
	public TickRecord() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("bid", "ask", "datafeed", "flags");
	}
	/**
	 * @param bid bid, ask<br>
	 * @param ask bid, ask<br>
	 * @param datafeed index if datafeed<br>
	 * @param flags TICK_FLAG_* flags
	 */
	public TickRecord(double bid, double ask, int datafeed, byte flags) {
		super();
		this.bid = bid;
		this.ask = ask;
		this.datafeed = datafeed;
		this.flags = flags;
	}
	public TickRecord(Pointer peer) {
		super(peer);
	}
	public static abstract class ByReference extends TickRecord implements Structure.ByReference {
		
	};
	public static abstract class ByValue extends TickRecord implements Structure.ByValue {
		
	};
}
