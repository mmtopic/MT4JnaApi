package com.mmtap.trader.janapi;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * --- plugin with parameters<br>
 * <i>native declaration : MT4ManagerAPI.h:660</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ConPluginParam extends Structure {
	/**
	 * plugin configuration<br>
	 * C type : ConPlugin
	 */
	public ConPlugin plugin;
	/**
	 * plugin parameters<br>
	 * C type : PluginCfg*
	 */
	public com.mmtap.trader.janapi.PluginCfg.ByReference params;
	/** total plugin parameters */
	public int total;
	public ConPluginParam() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("plugin", "params", "total");
	}
	/**
	 * @param plugin plugin configuration<br>
	 * C type : ConPlugin<br>
	 * @param params plugin parameters<br>
	 * C type : PluginCfg*<br>
	 * @param total total plugin parameters
	 */
	public ConPluginParam(ConPlugin plugin, com.mmtap.trader.janapi.PluginCfg.ByReference params, int total) {
		super();
		this.plugin = plugin;
		this.params = params;
		this.total = total;
	}
	public ConPluginParam(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends ConPluginParam implements Structure.ByReference {
		
	};
	public static class ByValue extends ConPluginParam implements Structure.ByValue {
		
	};
}
