package com.mmtap.trader.janapi;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * +------------------------------------------------------------------+<br>
 * <i>native declaration : MT4ManagerAPI.h:1260</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public abstract class SymbolInfo extends Structure {
	/**
	 * symbol name<br>
	 * C type : char[12]
	 */
	public byte[] symbol = new byte[12];
	/** floating point digits */
	public int digits;
	/** symbol counter */
	public int count;
	/** visibility */
	public int visible;
	/** symbol type (symbols group index) */
	public int type;
	/** symbol point=1/pow(10,digits) */
	public double point;
	/** symbol spread */
	public int spread;
	/** spread balance */
	public int spread_balance;
	/** direction */
	public int direction;
	/** update flag */
	public int updateflag;
	/** Conversion Error : time_t (Primitive without known type for this runtime: NativeTime) */
	/** bid, ask */
	public double bid;
	/** bid, ask */
	public double ask;
	/** high, low */
	public double high;
	/** high, low */
	public double low;
	/** commission */
	public double commission;
	/** commission type */
	public int comm_type;
	public SymbolInfo() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("symbol", "digits", "count", "visible", "type", "point", "spread", "spread_balance", "direction", "updateflag", "bid", "ask", "high", "low", "commission", "comm_type");
	}
	public SymbolInfo(Pointer peer) {
		super(peer);
	}
	public static abstract class ByReference extends SymbolInfo implements Structure.ByReference {
		
	};
	public static abstract class ByValue extends SymbolInfo implements Structure.ByValue {
		
	};
}
