package com.mmtap.trader.janapi;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * +------------------------------------------------------------------+<br>
 * <i>native declaration : MT4ManagerAPI.h:294</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ConGroup extends Structure {
	/**
	 * group name<br>
	 * C type : char[16]
	 */
	public byte[] group = new byte[16];
	/** enable group */
	public int enable;
	/** trade confirmation timeout (seconds) */
	public int timeout;
	/** one-time password mode */
	public int otp_mode;
	/**
	 * company name<br>
	 * C type : char[128]
	 */
	public byte[] company = new byte[128];
	/**
	 * statements signature<br>
	 * C type : char[128]
	 */
	public byte[] signature = new byte[128];
	/**
	 * company support page<br>
	 * C type : char[128]
	 */
	public byte[] support_page = new byte[128];
	/**
	 * statements SMTP server<br>
	 * C type : char[64]
	 */
	public byte[] smtp_server = new byte[64];
	/**
	 * statements SMTP login<br>
	 * C type : char[32]
	 */
	public byte[] smtp_login = new byte[32];
	/**
	 * statements SMTP password<br>
	 * C type : char[32]
	 */
	public byte[] smtp_password = new byte[32];
	/**
	 * support email<br>
	 * C type : char[64]
	 */
	public byte[] support_email = new byte[64];
	/**
	 * path to directory with custom templates<br>
	 * C type : char[32]
	 */
	public byte[] templates = new byte[32];
	/** copy statements on support email */
	public int copies;
	/** enable statements */
	public int reports;
	/** default leverage (user don't specify leverage himself) */
	public int default_leverage;
	/** default deposit  (user don't specify balance  himself) */
	public double default_deposit;
	/** maximum simultaneous securities */
	public int maxsecurities;
	/**
	 * security group settings<br>
	 * C type : ConGroupSec[(32)]
	 */
	public ConGroupSec[] secgroups = new ConGroupSec[32];
	/**
	 * special securities settings<br>
	 * C type : ConGroupMargin[(128)]
	 */
	public ConGroupMargin[] secmargins = new ConGroupMargin[128];
	/** count of special securities settings */
	public int secmargins_total;
	/**
	 * deposit currency<br>
	 * C type : char[12]
	 */
	public byte[] currency = new byte[12];
	/** virtual credit */
	public double credit;
	/** margin call level (percents) */
	public int margin_call;
	/** margin mode-MARGIN_DONT_USE,MARGIN_USE_ALL,MARGIN_USE_PROFIT,MARGIN_USE_LOSS */
	public int margin_mode;
	/** stop out level */
	public int margin_stopout;
	/** annual interest rate (percents) */
	public double interestrate;
	/** use rollovers & interestrate */
	public int use_swap;
	/** news mode */
	public int news;
	/** rights bit mask-ALLOW_FLAG_EMAIL */
	public int rights;
	/** check IE prices on requests */
	public int check_ie_prices;
	/** maximum orders and open positions */
	public int maxpositions;
	/** partial close mode (if !=0 original position will be fully closed and remain position will be fully reopened) */
	public int close_reopen;
	/** hedge prohibition flag */
	public int hedge_prohibited;
	/** fifo rule */
	public int close_fifo;
	/** use large leg margin for hedged positions */
	public int hedge_largeleg;
	/**
	 * reserved<br>
	 * C type : int[2]
	 */
	public int[] unused_rights = new int[2];
	/**
	 * internal data<br>
	 * C type : char[16]
	 */
	public byte[] securities_hash = new byte[16];
	/** margin controlling type { MARGIN_TYPE_PERCENT,  MARGIN_TYPE_CURRENCY } */
	public int margin_type;
	/** inactivity period after which account moves to archive base (in days) */
	public int archive_period;
	/** maxumum balance of accounts to move in archive base */
	public int archive_max_balance;
	/** skip fully hedged accounts when checking for stopout */
	public int stopout_skip_hedged;
	/** pendings clean period */
	public int archive_pending_period;
	/**
	 * LANGID array<br>
	 * C type : UINT[8]
	 */
	public int[] news_languages = new int[8];
	/** news languages total */
	public int news_languages_total;
	/** C type : int[17] */
	public int[] reserved = new int[17];
	public ConGroup() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("group", "enable", "timeout", "otp_mode", "company", "signature", "support_page", "smtp_server", "smtp_login", "smtp_password", "support_email", "templates", "copies", "reports", "default_leverage", "default_deposit", "maxsecurities", "secgroups", "secmargins", "secmargins_total", "currency", "credit", "margin_call", "margin_mode", "margin_stopout", "interestrate", "use_swap", "news", "rights", "check_ie_prices", "maxpositions", "close_reopen", "hedge_prohibited", "close_fifo", "hedge_largeleg", "unused_rights", "securities_hash", "margin_type", "archive_period", "archive_max_balance", "stopout_skip_hedged", "archive_pending_period", "news_languages", "news_languages_total", "reserved");
	}
	public ConGroup(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends ConGroup implements Structure.ByReference {
		
	};
	public static class ByValue extends ConGroup implements Structure.ByValue {
		
	};
}
