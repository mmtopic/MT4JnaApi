package com.mmtap.trader.janapi;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * ---<br>
 * <i>native declaration : MT4ManagerAPI.h:406</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ConLiveUpdate extends Structure {
	/**
	 * company<br>
	 * C type : char[128]
	 */
	public byte[] company = new byte[128];
	/**
	 * path to LiveUpdate<br>
	 * C type : char[256]
	 */
	public byte[] path = new byte[256];
	/** version */
	public int version;
	/** build */
	public int build;
	/** max. simultaneous connections */
	public int maxconnect;
	/** current connections (read only) */
	public int connections;
	/** type LIVE_UPDATE_* */
	public int type;
	/** enable */
	public int enable;
	/** total files count */
	public int totalfiles;
	/**
	 * files' configurations<br>
	 * C type : LiveInfoFile[(128)]
	 */
	public LiveInfoFile[] files = new LiveInfoFile[128];
	/**
	 * reserved<br>
	 * C type : int[16]
	 */
	public int[] reserved = new int[16];
	/**
	 * internal data<br>
	 * C type : ConLiveUpdate*
	 */
	public ConLiveUpdate.ByReference next;
	public ConLiveUpdate() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("company", "path", "version", "build", "maxconnect", "connections", "type", "enable", "totalfiles", "files", "reserved", "next");
	}
	public ConLiveUpdate(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends ConLiveUpdate implements Structure.ByReference {
		
	};
	public static class ByValue extends ConLiveUpdate implements Structure.ByValue {
		
	};
}
