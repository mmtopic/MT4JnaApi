package com.mmtap.trader.janapi;
import com.mmtap.trader.janapi.MT4ManagerAPILibrary.COLORREF;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * ---<br>
 * <i>native declaration : MT4ManagerAPI.h:514</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public abstract class ConSymbol extends Structure {
	/**
	 * name<br>
	 * C type : char[12]
	 */
	public byte[] symbol = new byte[12];
	/**
	 * description<br>
	 * C type : char[64]
	 */
	public byte[] description = new byte[64];
	/**
	 * synonym<br>
	 * C type : char[12]
	 */
	public byte[] source = new byte[12];
	/**
	 * currency<br>
	 * C type : char[12]
	 */
	public byte[] currency = new byte[12];
	/** security group (see ConSymbolGroup) */
	public int type;
	/** security precision */
	public int digits;
	/** trade mode */
	public int trade;
	/**
	 * background color<br>
	 * C type : COLORREF
	 */
	public COLORREF background_color;
	/** symbols index */
	public int count;
	/** symbols index in market watch */
	public int count_original;
	/** C type : int[7] */
	public int[] external_unused = new int[7];
	/** allow real time quotes */
	public int realtime;
	/** Conversion Error : time_t (Primitive without known type for this runtime: NativeTime) */
	/** Conversion Error : time_t (Primitive without known type for this runtime: NativeTime) */
	/**
	 * quote & trade sessions<br>
	 * C type : ConSessions[7]
	 */
	public ConSessions[] sessions = new ConSessions[7];
	/** profit calculation mode */
	public int profit_mode;
	/** reserved */
	public int profit_reserved;
	/** filter value */
	public int filter;
	/** filtration parameter */
	public int filter_counter;
	/** max. permissible deviation from last quote (percents) */
	public double filter_limit;
	/** smoothing */
	public int filter_smoothing;
	/** reserved */
	public float filter_reserved;
	/** enable to log quotes */
	public int logging;
	/** spread */
	public int spread;
	/** spread balance */
	public int spread_balance;
	/** execution mode */
	public int exemode;
	/** enable swaps */
	public int swap_enable;
	/** swap type */
	public int swap_type;
	/** swaps values for long & short postions */
	public double swap_long;
	/** swaps values for long & short postions */
	public double swap_short;
	/** triple rollover day-0-Monday,1-Tuesday...4-Friday */
	public int swap_rollover3days;
	/** contract size */
	public double contract_size;
	/** one tick value */
	public double tick_value;
	/** one tick size */
	public double tick_size;
	/** stops deviation value */
	public int stops_level;
	/** GTC mode { ORDERS_DAILY, ORDERS_GTC, ORDERS_DAILY_NO_STOPS } */
	public int gtc_pendings;
	/** margin calculation mode */
	public int margin_mode;
	/** initial margin */
	public double margin_initial;
	/** margin maintenance */
	public double margin_maintenance;
	/** hedged margin */
	public double margin_hedged;
	/** margin divider */
	public double margin_divider;
	/** point size-(1/(10^digits) */
	public double point;
	/** multiply 10^digits */
	public double multiply;
	/** tickvalue for bid */
	public double bid_tickvalue;
	/** tickvalue for ask */
	public double ask_tickvalue;
	/** allow only BUY positions */
	public int long_only;
	/** max. volume for Instant Execution */
	public int instant_max_volume;
	/**
	 * currency of margin requirments<br>
	 * C type : char[12]
	 */
	public byte[] margin_currency = new byte[12];
	/** modification freeze level */
	public int freeze_level;
	/** strong hedged margin mode */
	public int margin_hedged_strong;
	/** Conversion Error : time_t (Primitive without known type for this runtime: NativeTime) */
	/** quotes delay after session start */
	public int quotes_delay;
	/** use open price at swaps calculation in SWAP_BY_INTEREST mode */
	public int swap_openprice;
	/** charge variation margin on rollover */
	public int swap_variation_margin;
	/**
	 * reserved<br>
	 * C type : int[21]
	 */
	public int[] unused = new int[21];
	public ConSymbol() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("symbol", "description", "source", "currency", "type", "digits", "trade", "background_color", "count", "count_original", "external_unused", "realtime", "sessions", "profit_mode", "profit_reserved", "filter", "filter_counter", "filter_limit", "filter_smoothing", "filter_reserved", "logging", "spread", "spread_balance", "exemode", "swap_enable", "swap_type", "swap_long", "swap_short", "swap_rollover3days", "contract_size", "tick_value", "tick_size", "stops_level", "gtc_pendings", "margin_mode", "margin_initial", "margin_maintenance", "margin_hedged", "margin_divider", "point", "multiply", "bid_tickvalue", "ask_tickvalue", "long_only", "instant_max_volume", "margin_currency", "freeze_level", "margin_hedged_strong", "quotes_delay", "swap_openprice", "swap_variation_margin", "unused");
	}
	public ConSymbol(Pointer peer) {
		super(peer);
	}
	public static abstract class ByReference extends ConSymbol implements Structure.ByReference {
		
	};
	public static abstract class ByValue extends ConSymbol implements Structure.ByValue {
		
	};
}
