package com.mmtap.trader.janapi;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * ---<br>
 * <i>native declaration : MT4ManagerAPI.h:499</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ConSessions extends Structure {
	/**
	 * quote sessions<br>
	 * C type : ConSession[3]
	 */
	public ConSession[] quote = new ConSession[3];
	/**
	 * trade sessions<br>
	 * C type : ConSession[3]
	 */
	public ConSession[] trade = new ConSession[3];
	/** internal data */
	public int quote_overnight;
	/** internal data */
	public int trade_overnight;
	/**
	 * reserved<br>
	 * C type : int[2]
	 */
	public int[] reserved = new int[2];
	public ConSessions() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("quote", "trade", "quote_overnight", "trade_overnight", "reserved");
	}
	/**
	 * @param quote quote sessions<br>
	 * C type : ConSession[3]<br>
	 * @param trade trade sessions<br>
	 * C type : ConSession[3]<br>
	 * @param quote_overnight internal data<br>
	 * @param trade_overnight internal data<br>
	 * @param reserved reserved<br>
	 * C type : int[2]
	 */
	public ConSessions(ConSession quote[], ConSession trade[], int quote_overnight, int trade_overnight, int reserved[]) {
		super();
		if ((quote.length != this.quote.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.quote = quote;
		if ((trade.length != this.trade.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.trade = trade;
		this.quote_overnight = quote_overnight;
		this.trade_overnight = trade_overnight;
		if ((reserved.length != this.reserved.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.reserved = reserved;
	}
	public ConSessions(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends ConSessions implements Structure.ByReference {
		
	};
	public static class ByValue extends ConSessions implements Structure.ByValue {
		
	};
}
