package com.mmtap.trader.janapi;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * +------------------------------------------------------------------+<br>
 * <i>native declaration : MT4ManagerAPI.h:438</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ConManagerSec extends Structure {
	/** internal data */
	public int internal;
	/** enable */
	public int enable;
	/** min. lots */
	public int minimum_lots;
	/** max. lots */
	public int maximum_lots;
	/**
	 * reserved<br>
	 * C type : int[16]
	 */
	public int[] unused = new int[16];
	public ConManagerSec() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("internal", "enable", "minimum_lots", "maximum_lots", "unused");
	}
	/**
	 * @param internal internal data<br>
	 * @param enable enable<br>
	 * @param minimum_lots min. lots<br>
	 * @param maximum_lots max. lots<br>
	 * @param unused reserved<br>
	 * C type : int[16]
	 */
	public ConManagerSec(int internal, int enable, int minimum_lots, int maximum_lots, int unused[]) {
		super();
		this.internal = internal;
		this.enable = enable;
		this.minimum_lots = minimum_lots;
		this.maximum_lots = maximum_lots;
		if ((unused.length != this.unused.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.unused = unused;
	}
	public ConManagerSec(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends ConManagerSec implements Structure.ByReference {
		
	};
	public static class ByValue extends ConManagerSec implements Structure.ByValue {
		
	};
}
