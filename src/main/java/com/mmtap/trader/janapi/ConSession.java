package com.mmtap.trader.janapi;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * +------------------------------------------------------------------+<br>
 * <i>native declaration : MT4ManagerAPI.h:491</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ConSession extends Structure {
	/** session open  time: hour & minute */
	public short open_hour;
	/** session open  time: hour & minute */
	public short open_min;
	/** session close time: hour & minute */
	public short close_hour;
	/** session close time: hour & minute */
	public short close_min;
	/** internal data */
	public int open;
	/** internal data */
	public int close;
	/**
	 * internal data<br>
	 * C type : short[7]
	 */
	public short[] align = new short[7];
	public ConSession() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("open_hour", "open_min", "close_hour", "close_min", "open", "close", "align");
	}
	/**
	 * @param open_hour session open  time: hour & minute<br>
	 * @param open_min session open  time: hour & minute<br>
	 * @param close_hour session close time: hour & minute<br>
	 * @param close_min session close time: hour & minute<br>
	 * @param open internal data<br>
	 * @param close internal data<br>
	 * @param align internal data<br>
	 * C type : short[7]
	 */
	public ConSession(short open_hour, short open_min, short close_hour, short close_min, int open, int close, short align[]) {
		super();
		this.open_hour = open_hour;
		this.open_min = open_min;
		this.close_hour = close_hour;
		this.close_min = close_min;
		this.open = open;
		this.close = close;
		if ((align.length != this.align.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.align = align;
	}
	public ConSession(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends ConSession implements Structure.ByReference {
		
	};
	public static class ByValue extends ConSession implements Structure.ByValue {
		
	};
}
