package com.mmtap.trader.janapi;
import com.mmtap.trader.janapi.MT4ManagerAPILibrary.COLORREF;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * ---<br>
 * <i>native declaration : MT4ManagerAPI.h:927</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public abstract class UserRecord extends Structure {
	/** login */
	public int login;
	/**
	 * group<br>
	 * C type : char[16]
	 */
	public byte[] group = new byte[16];
	/**
	 * password<br>
	 * C type : char[16]
	 */
	public byte[] password = new byte[16];
	/** enable */
	public int enable;
	/** allow to change password */
	public int enable_change_password;
	/** allow to open/positions (TRUE-may not trade) */
	public int enable_read_only;
	/** allow to use one-time password */
	public int enable_otp;
	/**
	 * for future use<br>
	 * C type : int[2]
	 */
	public int[] enable_reserved = new int[2];
	/**
	 * read-only mode password<br>
	 * C type : char[16]
	 */
	public byte[] password_investor = new byte[16];
	/**
	 * phone password<br>
	 * C type : char[32]
	 */
	public byte[] password_phone = new byte[32];
	/**
	 * name<br>
	 * C type : char[128]
	 */
	public byte[] name = new byte[128];
	/**
	 * country<br>
	 * C type : char[32]
	 */
	public byte[] country = new byte[32];
	/**
	 * city<br>
	 * C type : char[32]
	 */
	public byte[] city = new byte[32];
	/**
	 * state<br>
	 * C type : char[32]
	 */
	public byte[] state = new byte[32];
	/**
	 * zipcode<br>
	 * C type : char[16]
	 */
	public byte[] zipcode = new byte[16];
	/**
	 * address<br>
	 * C type : char[96]
	 */
	public byte[] address = new byte[96];
	/**
	 * lead source<br>
	 * C type : char[32]
	 */
	public byte[] lead_source = new byte[32];
	/**
	 * phone<br>
	 * C type : char[32]
	 */
	public byte[] phone = new byte[32];
	/**
	 * email<br>
	 * C type : char[48]
	 */
	public byte[] email = new byte[48];
	/**
	 * comment<br>
	 * C type : char[64]
	 */
	public byte[] comment = new byte[64];
	/**
	 * SSN (IRD)<br>
	 * C type : char[32]
	 */
	public byte[] id = new byte[32];
	/**
	 * status<br>
	 * C type : char[16]
	 */
	public byte[] status = new byte[16];
	/** Conversion Error : time_t (Primitive without known type for this runtime: NativeTime) */
	/** Conversion Error : time_t (Primitive without known type for this runtime: NativeTime) */
	/** leverage */
	public int leverage;
	/** agent account */
	public int agent_account;
	/** Conversion Error : time_t (Primitive without known type for this runtime: NativeTime) */
	/** last visit ip */
	public int last_ip;
	/** balance */
	public double balance;
	/** previous month balance */
	public double prevmonthbalance;
	/** previous day balance */
	public double prevbalance;
	/** credit */
	public double credit;
	/** accumulated interest rate */
	public double interestrate;
	/** taxes */
	public double taxes;
	/** previous month equity */
	public double prevmonthequity;
	/** previous day equity */
	public double prevequity;
	/**
	 * for future use<br>
	 * C type : double[2]
	 */
	public double[] reserved2 = new double[2];
	/**
	 * one-time password secret<br>
	 * C type : char[32]
	 */
	public byte[] otp_secret = new byte[32];
	/**
	 * secure data reserved<br>
	 * C type : char[240]
	 */
	public byte[] secure_reserved = new byte[240];
	/** enable send reports by email */
	public int send_reports;
	/** MQ client identificator */
	public int mqid;
	/**
	 * color got to client (used by MT Manager)<br>
	 * C type : COLORREF
	 */
	public COLORREF user_color;
	/**
	 * for future use<br>
	 * C type : char[40]
	 */
	public byte[] unused = new byte[40];
	/**
	 * for API usage<br>
	 * C type : char[16]
	 */
	public byte[] api_data = new byte[16];
	public UserRecord() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("login", "group", "password", "enable", "enable_change_password", "enable_read_only", "enable_otp", "enable_reserved", "password_investor", "password_phone", "name", "country", "city", "state", "zipcode", "address", "lead_source", "phone", "email", "comment", "id", "status", "leverage", "agent_account", "last_ip", "balance", "prevmonthbalance", "prevbalance", "credit", "interestrate", "taxes", "prevmonthequity", "prevequity", "reserved2", "otp_secret", "secure_reserved", "send_reports", "mqid", "user_color", "unused", "api_data");
	}
	public UserRecord(Pointer peer) {
		super(peer);
	}
	public static abstract class ByReference extends UserRecord implements Structure.ByReference {
		
	};
	public static abstract class ByValue extends UserRecord implements Structure.ByValue {
		
	};
}
