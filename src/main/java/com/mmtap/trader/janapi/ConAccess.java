package com.mmtap.trader.janapi;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * +------------------------------------------------------------------+<br>
 * <i>native declaration : MT4ManagerAPI.h:133</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ConAccess extends Structure {
	/** type of action (FW_BLOCK,FW_PERMIT) */
	public int action;
	/** from, to addresses */
	public NativeLong from;
	/** from, to addresses */
	public NativeLong to;
	/**
	 * comment<br>
	 * C type : char[64]
	 */
	public byte[] comment = new byte[64];
	/**
	 * reserved<br>
	 * C type : int[17]
	 */
	public int[] reserved = new int[17];
	public ConAccess() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("action", "from", "to", "comment", "reserved");
	}
	/**
	 * @param action type of action (FW_BLOCK,FW_PERMIT)<br>
	 * @param from from, to addresses<br>
	 * @param to from, to addresses<br>
	 * @param comment comment<br>
	 * C type : char[64]<br>
	 * @param reserved reserved<br>
	 * C type : int[17]
	 */
	public ConAccess(int action, NativeLong from, NativeLong to, byte comment[], int reserved[]) {
		super();
		this.action = action;
		this.from = from;
		this.to = to;
		if ((comment.length != this.comment.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.comment = comment;
		if ((reserved.length != this.reserved.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.reserved = reserved;
	}
	public ConAccess(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends ConAccess implements Structure.ByReference {
		
	};
	public static class ByValue extends ConAccess implements Structure.ByValue {
		
	};
}
